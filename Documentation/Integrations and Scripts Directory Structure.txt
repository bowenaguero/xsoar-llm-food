
Skip to main content
⭐️ If you like Cortex XSOAR Content, give it a star on GitHub! ⭐
Cortex XSOAR for Developers (Formerly Demisto)
Developer Docs
Articles
Reference
Marketplace
Products

Partners

Blog
Cortex XSOAR for Developers (Formerly Demisto)

    Welcome
    Getting Started
        Getting Started Guide
        Cortex XSOAR Concepts
        Design
            Design Your Contribution
            Use Cases
            Design Best Practices
        Developing
            Cortex XSOAR IDE
            PyCharm IDE Plugin
            VSCode Extension
            Development Setup
        Frequently Asked Questions
    Contributing
        Contributing XSOAR Content
        Contribution Requirements
        Contribution Checklist
        Pull Request Conventions
        Documentation Contributions
        Contributing Through Cortex XSOAR Marketplace
        Contribution Demo Preparation
        Contribution SLA
        Contributing to Demisto SDK
    Content Packs
        Content Packs Structure
        Pack Documentation
        Release Notes
    Integrations & Scripts
        Components
            Directory Structure
            Metadata YAML File
            Parameter Types
            Integration Description File
            Integration Logo Standards
            README File
        Developing
            Python Code Conventions
            Fetching Incidents
            Context and Outputs
            Context Standards
                About Context Standards
                Mandatory Context Standards
                Recommended Context Standards
            Generic Commands
                About Generic Commands
                Generic Reputation Commands
                Generic Endpoint Command
            Reputation and DBotScore
            Using Docker
            Builtins
                Get Entries Filter
                task Complete
                reopen Investigation
        Testing
            Linting
            Unit Testing
            Test Playbooks
            Debugging
        Advanced Topics
            Feed Integrations
            Event Collection Integrations
            Developing an IAM Integration
            PowerShell
            Fetching Credentials
            Long Running Containers
            Cortex XSOAR Transform Language (DT)
            Integration Cache
            Mirroring Integration
            Integration Code Generator
            Scheduled Commands
            Generate YML from Python
            Fetch Missing Incidents with Generic Lookback Methods
            Trust Any Certificate
    Playbooks
        Playbooks
        Playbook Contribution Guide
        Create Playbooks
        Playbook Settings
        Playbook Conventions
        Inputs and Outputs
        Extend Context
        Create a Playbook Task
        Create a Conditional Task
        Communication Tasks
        Create a Communication Task
        Customize a Communication Task Message
        Generic Polling
        Playbook Task Field Reference
        Generic Playbooks
        Playbook Documentation
    Incidents, Fields & Layouts
        Cortex XSOAR Incident Lifecycle
        Working with Incident Types
        Convert Layout Files from Cortex XSOAR 5.5
        Working with Incident Fields
        Jobs
        Classification and Mapping
        Pre-processing Rules
        Lists
    Indicators, Fields & Layouts
        Indicator Fields
        URL Extraction
        Domain Extraction
        Relationships
    Documentation
        Documentation Best Practices
        Pack Documentation
        Pack Release Notes
        README File
        Integration Description File
        Images in Documentation Files
    Tutorials
        Set Up Your Dev Environment
        Set Up Your GitHub Codespace Environment
        Set Up Your Containerized Development Environment
        Contribution Design
        Create an Integration
    Privacy Statement

Integrations and Scripts Directory Structure

Integrations and Automation Scripts in Cortex XSOAR are stored in YAML files that include all the required information (metadata, code, images, etc.). This is what we call the Unified YAML file.

To better handle them in the Content repository, Python/Powershell Automation Scripts and Integrations are stored with a Directory Structure, where the YAML files only contains the metadata, while code and artifacts live in separate files.

This is requirement, among others, for running linting and unit testing of the code. When an Integration or Automation Script is exported from Cortex XSOAR using demisto-sdk download, the Unified YAML is automatically split in its components.

When an Integration or Automation Script is imported into Cortex XSOAR using demisto-sdk upload, the Integration/Automation directory files are automatically assembled in the Unified YAML file that gets uploaded.

As a content developer, most of the times you don't need to worry about the Unified file, and just work with the Directory Structure.
The Directory Structure is as follows:#
 .
├── <INTEGRATION-NAME>.py              // Integration / automation script Python code.
├── <INTEGRATION-NAME>_test.py         // Python unit test code.
├── <INTEGRATION-NAME>.yml             // Configuration YAML file.
├── <INTEGRATION-NAME>_image.png       // Integration PNG logo (for integrations only).
├── <INTEGRATION-NAME>_description.md  // Detailed instructions markdown file (for integrations only)
├── README.md                          // Integration / automation script documentation.
├── Pipfile                            // Can be copied from Tests/scripts/dev_envs/default_python3
└── Pipfile.lock                       // Can be copied from Tests/scripts/dev_envs/default_python3    

For example, the integration Cortex XDR is stored under Integrations directory in a sub-directory named CortexXDRIR and contain the following files:
.Integrations   
│
└─── .CortexXDRIR
│    ├── CortexXDRIR.py
│    ├── CortexXDRIR_test.py
│    ├── CortexXDRIR.yml
│    ├── CortexXDRIR_image.png
│    ├── CortexXDRIR_description.md
│    ├── README.md
│    ├── Pipfile
|    └── Pipfile.lock
Split a YML file to Directory Structure#

If you need to split a Unified YAML file (exported via the Cortex XSOAR UI) into the Directory Structure you can use the following options:

    demisto-sdk split: This command will also format the code (using autopep8) and setup the proper Pipenv files. See full command documentation here.
    Cortex XSOAR IntelliJ Plugin

Generate a YML file from Directory Structure#

If you need to manually create the Unified YAML file (for example to manually import it in Cortex XSOAR via the UI), you can either use:

    demisto-sdk prepare-content: See full command documentation here.
    Cortex XSOAR IntelliJ Plugin

Edit this page
Last updated on 10/9/2024
Previous
« Release Notes
Next
Integrations and Scripts Metadata YAML File »

    The Directory Structure is as follows:
    Split a YML file to Directory Structure
    Generate a YML file from Directory Structure

Docs

    Developer Docs
    Become a Technology Partner

Social

    Blog

Palo Alto Networks for Developers
Copyright © 2025 Palo Alto Networks, Inc.
